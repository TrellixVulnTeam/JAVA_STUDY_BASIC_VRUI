<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 매퍼 연결 -->
<mapper namespace="com.cloud.repository.mapper.MemberMapper">

	<resultMap id="memberMap" type="member">
		<result column="member_no" property="memberNo" />
		<result column="id" property="id" />
		<result column="name" property="name" />
		<result column="email" property="email" />
		<result column="pass" property="pass" />
		<result column="address" property="address" />
		<result column="reg_date" property="regDate" />
		<result column="max_volume" property="maxVolume" />
		<result column="profile_img" property="profileImg" />
		<result column="type" property="type" />
		<result column="lock_mode" property="lockMode" />
		<result column="status" property="status" />
	</resultMap>

	<resultMap id="authSmsMap" type="authSms">
		<result column="no" property="no" />
		<result column="auth_key" property="authKey" />
		<result column="tel" property="tel" />
	</resultMap>

	<resultMap id="autoLoginMap" type="autoLogin">
		<result column="auto_login_no" property="autoLoginNo" />
		<result column="member_no" property="memberNo" />
		<result column="session_id" property="sessionId" />
		<result column="limit_time" property="limitTime" />
	</resultMap>
	
	
	<select id="idChk" parameterType="string" resultType="int">
		select
			count(id)
		from members
			where id = #{id}
	</select>

	<insert id="memberInsert" parameterType="member">
		insert into members
			(id, pass, name, email, reg_date, address, profile_img, type)
		values
			(#{id}, #{pass}, #{name}, #{email}, now(), #{address}, #{profileImg}, #{type})
	</insert>

	<select id="memberLogin" parameterType="member" resultMap="memberMap">
		select *
			from members
		where id = #{id} and pass = #{pass}
	</select>

	<insert id="keyInsert" parameterType="authSms">
		insert into auth_sms
			(auth_key, tel)
		values
			(#{authKey}, #{tel})
	</insert>


	<select id="keyChk" parameterType="authSms" resultType="int">
	select
		count(*)
	from auth_sms
		<where>
			tel = #{tel}
			<if test="authKey != null">
				and auth_key = #{authKey}
			</if>
		</where>
	</select>
	
	<delete id="keyDelete" parameterType="authSms">
		delete from auth_sms
			<where>
				tel = #{tel}
				<if test="authKey != null">
					and auth_key = #{authKey}
				</if>
			</where>
	</delete>

	<!--  자동 로그인!  -->
	<insert id="autoLoginInsert" parameterType="autoLogin">
		insert into auto_login
			(member_no, session_id, limit_time)
		values
			(#{memberNo}, #{sessionId}, #{limitTime})
	</insert>
	
	<update id="autoLoginUpdate" parameterType="int">
		UPDATE auto_login 
			SET limit_time = now()
		WHERE member_no = #{memberNo};
	</update>
		
    <select id="autoLoginChk" resultMap="autoLoginMap" parameterType="autoLogin">
        select *
			from auto_login 
        where session_id = #{sessionId} and limit_time > now()
			order by limit_time desc limit 1
    </select>

	<select id="autoLoginToMember" parameterType="int" resultMap="memberMap">
		select *
			from members
		where member_no = #{memberNo}
	</select>


	<select id="pwChk" parameterType="member" resultMap="memberMap">
		select *
			from members
		where member_no = #{memberNo} and id = #{id} and pass = #{pass}
	</select>
	
	<update id="lockUpdate" parameterType="member">
		UPDATE members 
			SET lock_mode = #{lockMode}
		where member_no = #{memberNo}
	</update>
</mapper>




